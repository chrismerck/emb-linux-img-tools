#!/bin/bash
#
# imgmount -- mount disk image on loopback device
#
# WARNING: Do not run multiple instances of this script at once!
# 

usage ()
{
  echo ""
  echo "Usage: imgmount [OPTION] <img-file>"
  echo ""
  echo "  Options:"
  echo "    -u   unmount"
  echo "    -r   unmount (if needed) then remount"
  echo "    -h   this help"
  echo ""
  exit 1
}

# parse arguments
case $1 in
  "-u" )
    UNMOUNT=1
    shift
    ;;
  "-r" )
    UNMOUNT=1
    MOUNT=1
    shift
    ;;
  "-h" )
    usage ;;
  "" )
    usage ;;
  * )
    MOUNT=1
    ;;
esac
IMGFILE=$1

# check if image already mounted
LOOPS=$(losetup -j $IMGFILE | sed -r 's/^([^:]*):.*/\1/')
for loop in $LOOPS; do
  if [ ! -z $UNMOUNT ]; then
    MNT_PREFIX="/mnt/$(echo $loop | sed -r 's/\/dev\///')"
    umount "$MNT_PREFIX"   2> /dev/null   # if raw partition 
    umount "$MNT_PREFIX"p* 2> /dev/null   # if disk with multiple partitions
    rmdir $MNT_PREFIX 2> /dev/null # remove old mount points
    rmdir $MNT_PREFIX* 2> /dev/null
    kpartx -v -s -d $loop > /dev/null
    losetup -d $loop
    if [ $? -eq 0 ]; then
      echo "Detached from $loop"
    else
      echo "Failed to detach from $loop"
    fi
    UNMOUNT_FLAG=1
  else
    echo "Image already mounted."
    exit 1
  fi
done

# end here if we are not mounting
if [ -z $MOUNT ]; then
  if [ -z $UNMOUNT_FLAG ]; then
    echo "Image not mounted."
    exit 1
  else
    exit 0
  fi
fi

# mount
LOOP=$(losetup -f --show $IMGFILE)
if [ $? -eq 0 ]; then
  echo "Attached to $LOOP"
  # try to mount whole image
  BARE_LOOP=$(echo $LOOP | sed -r 's/\/dev\///')
  MNT_PREFIX=/mnt/$BARE_LOOP
  mkdir -p $MNT_PREFIX
  mount $LOOP $MNT_PREFIX 2> /dev/null
  if [ $? -eq 0 ]; then
    echo "Mounted whole image at $MNT_PREFIX"
  else
    rmdir $MNT_PREFIX # cleanup unneeded dir
  fi
  # mount each partition
  PARTS=$(kpartx -v -s -a $LOOP | grep 'add map' | awk {'print $3'})
  for part in $PARTS; do
    MOUNTPOINT="/mnt/$part"
    mkdir -p $MOUNTPOINT
    mount "/dev/mapper/$part" $MOUNTPOINT 2> /dev/null
    if [ $? -eq 0 ]; then
      echo "Partition $part mounted at $MOUNTPOINT"
    else
      rmdir $MOUNTPOINT # cleanup unneeded dir
    fi
  done
  df -h | egrep "Filesystem|$BARE_LOOP"
  exit 0
else
  echo "Mount failed."
  exit 1
fi



